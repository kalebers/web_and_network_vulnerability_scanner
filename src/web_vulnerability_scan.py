import requests
import nmap
from bs4 import BeautifulSoup

# Port Scanning using nmap
def scan_ports(target):
    print(f"Scanning ports for {target}...")
    scanner = nmap.PortScanner()
    scanner.scan(target, '1-1024')  # Scanning first 1024 ports
    result = {}
    for host in scanner.all_hosts():
        result['host'] = host
        for proto in scanner[host].all_protocols():
            ports = scanner[host][proto].keys()
            result['ports'] = []
            for port in ports:
                state = scanner[host][proto][port]['state']
                result['ports'].append({"port": port, "state": state})
                print(f"Port: {port}, State: {state}")
    return result

# SQL Injection Testing
def sql_injection_test(url, params):
    print(f"Testing SQL Injection for {url}...")
    sql_payloads = ["' OR 1=1 --", "' OR 'a'='a", "'; DROP TABLE users; --"]
    vulnerabilities = []
    for payload in sql_payloads:
        test_params = params.copy()
        for param in test_params:
            test_params[param] = payload
        response = requests.get(url, params=test_params)
        if "SQL error" in response.text or "syntax error" in response.text:
            vulnerabilities.append(payload)
            print(f"Potential SQL Injection with payload: {payload}")
    return vulnerabilities

# XSS Testing
def xss_test(url, params):
    print(f"Testing XSS for {url}...")
    xss_payloads = ['<script>alert(1)</script>', '"><img src=x onerror=alert(1)>']
    vulnerabilities = []
    for payload in xss_payloads:
        test_params = params.copy()
        for param in test_params:
            test_params[param] = payload
        response = requests.get(url, params=test_params)
        if payload in response.text:
            vulnerabilities.append(payload)
            print(f"Vulnerable to XSS with payload: {payload}")
    return vulnerabilities

# Security Headers Check
def check_security_headers(url):
    print(f"Checking security headers for {url}...")
    response = requests.get(url)
    headers = response.headers
    required_headers = ['Content-Security-Policy', 'Strict-Transport-Security']
    missing_headers = []
    for header in required_headers:
        if header not in headers:
            missing_headers.append(header)
            print(f"{header} is missing.")
        else:
            print(f"{header} is present.")
    return missing_headers

# Crawler to discover forms and query parameters
def discover_forms(url):
    print(f"Discovering forms at {url}...")
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    forms = soup.find_all('form')
    form_details = []
    for form in forms:
        action = form.attrs.get('action', '').lower()
        method = form.attrs.get('method', 'get').lower()
        inputs = form.find_all('input')
        form_data = {
            'action': action,
            'method': method,
            'inputs': {}
        }
        for input_tag in inputs:
            input_name = input_tag.attrs.get('name')
            input_type = input_tag.attrs.get('type', 'text')
            if input_name:
                form_data['inputs'][input_name] = input_type
        form_details.append(form_data)
    return form_details

# Main Program
def vulnerability_scanner(url):
    print(f"Starting vulnerability scan for {url}")
    
    # Port Scanning
    host = url.split("//")[-1].split("/")[0]
    port_scan_results = scan_ports(host)

    # Discover forms and parameters
    forms = discover_forms(url)
    if not forms:
        print("No forms found. Using URL parameters for scanning.")
        query_params = {"test": "1"}  # Example query param if no forms are found
    else:
        # Test with the first form found
        print(f"Form found with action: {forms[0]['action']} and method: {forms[0]['method']}")
        query_params = {input_name: "test" for input_name in forms[0]['inputs'].keys()}
    
    # SQL Injection Testing
    sql_vulnerabilities = sql_injection_test(url, query_params)

    # XSS Testing
    xss_vulnerabilities = xss_test(url, query_params)

    # Security Headers Check
    missing_headers = check_security_headers(url)

    # Summary of the results
    print("\n--- Scan Summary ---")
    print(f"Open Ports: {port_scan_results}")
    print(f"SQL Injection Vulnerabilities: {sql_vulnerabilities}")
    print(f"XSS Vulnerabilities: {xss_vulnerabilities}")
    print(f"Missing Security Headers: {missing_headers}")

# Example Usage
if __name__ == "__main__":
    target_url = "http://something.com"  # Replace with the target URL
    vulnerability_scanner(target_url)
